// <auto-generated />
using System;
using AccesDataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AccesDataBase.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GestionAlmacenes.Entidad.Almacen", b =>
                {
                    b.Property<Guid>("AlmacenID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("almacen_id");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_actualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("NombreAlmacen")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre_almacen");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ubicacion");

                    b.HasKey("AlmacenID");

                    b.ToTable("Almacenes", (string)null);
                });

            modelBuilder.Entity("GestionAlmacenes.Entidad.MovimientosAlmacen", b =>
                {
                    b.Property<Guid>("MovimientoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("movimientoID");

                    b.Property<decimal>("CantidadMovida")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("CantidadMovida");

                    b.Property<string>("DocumentoRelacionado")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("DocumentoRelacionado");

                    b.Property<DateTime>("FechaMovimiento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("FechaMovimiento");

                    b.Property<Guid>("ProductoID")
                        .HasColumnType("uuid")
                        .HasColumnName("productoID");

                    b.Property<string>("TipoMovimiento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("TipoMovimiento");

                    b.Property<Guid>("UbicacionDestinoID")
                        .HasColumnType("uuid")
                        .HasColumnName("ubicacionDestinoID");

                    b.Property<Guid>("UbicacionOrigenID")
                        .HasColumnType("uuid")
                        .HasColumnName("ubicacionOrigenID");

                    b.Property<string>("UsuarioResponsable")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("UsuarioResponsable");

                    b.HasKey("MovimientoID");

                    b.HasIndex("ProductoID");

                    b.HasIndex("UbicacionDestinoID");

                    b.HasIndex("UbicacionOrigenID");

                    b.ToTable("movimientosAlmacen", (string)null);
                });

            modelBuilder.Entity("GestionAlmacenes.Entidad.OrdenesTransferenciaInterna", b =>
                {
                    b.Property<Guid>("OrdenTransferenciaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ordenTransferenciaID");

                    b.Property<Guid>("AlmacenDestinoID")
                        .HasColumnType("uuid")
                        .HasColumnName("almacenDestinoID");

                    b.Property<Guid>("AlmacenOrigenID")
                        .HasColumnType("uuid")
                        .HasColumnName("almacenOrigenID");

                    b.Property<decimal>("CantidadTransferida")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("cantidadTransferida");

                    b.Property<string>("EstadoTransferencia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("estadoTransferencia");

                    b.Property<DateTime>("FechaTransferencia")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaTransferencia");

                    b.Property<Guid>("ProductoID")
                        .HasColumnType("uuid")
                        .HasColumnName("productoID");

                    b.Property<string>("UsuarioResponsable")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("usuarioResponsable");

                    b.HasKey("OrdenTransferenciaID");

                    b.HasIndex("AlmacenDestinoID");

                    b.HasIndex("AlmacenOrigenID");

                    b.HasIndex("ProductoID");

                    b.ToTable("OrdenesTransferenciaInterna", (string)null);
                });

            modelBuilder.Entity("GestionAlmacenes.Entidad.Ubicacion", b =>
                {
                    b.Property<Guid>("UbicacionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ubicacionID");

                    b.Property<Guid>("AlmacenID")
                        .HasColumnType("uuid")
                        .HasColumnName("almacenID");

                    b.Property<decimal>("CapacidadUbicacion")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("capacidadUbicacion");

                    b.Property<string>("CodigoUbicacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("codigoUbicacion");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaActualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaCreacion");

                    b.Property<bool>("Ocupado")
                        .HasColumnType("boolean")
                        .HasColumnName("ocupado");

                    b.Property<string>("TipoUbicacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tipoUbicacion");

                    b.HasKey("UbicacionID");

                    b.HasIndex("AlmacenID");

                    b.ToTable("Ubicaciones", (string)null);
                });

            modelBuilder.Entity("GestionAlmacenes.Entidad.ZonasAlmacen", b =>
                {
                    b.Property<Guid>("ZonaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("zonaID");

                    b.Property<Guid>("AlmacenID")
                        .HasColumnType("uuid")
                        .HasColumnName("almacenID");

                    b.Property<decimal>("CapacidadZona")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("capacidadZona");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaActualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaCreacion");

                    b.Property<string>("NombreZona")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombreZona");

                    b.Property<string>("TipoZona")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tipoZona");

                    b.HasKey("ZonaID");

                    b.HasIndex("AlmacenID");

                    b.ToTable("ZonasAlmacen", (string)null);
                });

            modelBuilder.Entity("GestionCompras.Entidad.DetallesOrdenCompra", b =>
                {
                    b.Property<Guid>("DetalleOrdenCompraID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("detalleOrdenCompraID");

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("numeric")
                        .HasColumnName("cantidad");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaActualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaCreacion");

                    b.Property<Guid>("OrdenCompraID")
                        .HasColumnType("uuid")
                        .HasColumnName("ordenCompraID");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("numeric")
                        .HasColumnName("precioUnitario");

                    b.Property<Guid>("ProductoID")
                        .HasColumnType("uuid")
                        .HasColumnName("productoID");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric")
                        .HasColumnName("subtotal");

                    b.HasKey("DetalleOrdenCompraID");

                    b.HasIndex("OrdenCompraID");

                    b.HasIndex("ProductoID");

                    b.ToTable("DetallesOrdenCompra", (string)null);
                });

            modelBuilder.Entity("GestionCompras.Entidad.ItemDeOrdenDeCompra", b =>
                {
                    b.Property<Guid>("ItemDeOrdenDeCompraID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("itemDeOrdenDeCompraID");

                    b.Property<int>("CantidadOrdenada")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad_ordenada");

                    b.Property<Guid>("OrdenDeCompraID")
                        .HasColumnType("uuid")
                        .HasColumnName("ordenDeCompraID");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("numeric")
                        .HasColumnName("precio_unitario");

                    b.Property<Guid>("ProductoID")
                        .HasColumnType("uuid")
                        .HasColumnName("producto_id");

                    b.HasKey("ItemDeOrdenDeCompraID");

                    b.HasIndex("OrdenDeCompraID");

                    b.HasIndex("ProductoID");

                    b.ToTable("ItemDeOrdenDeCompra", (string)null);
                });

            modelBuilder.Entity("GestionCompras.Entidad.OrdenesCompra", b =>
                {
                    b.Property<Guid>("OrdenCompraID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ordenCompraID");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaActualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaCreacion");

                    b.Property<DateTime?>("FechaEntregaEstimada")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaEntregaEstimada");

                    b.Property<DateTime>("FechaOrden")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaOrden");

                    b.Property<Guid>("ProveedorID")
                        .HasColumnType("uuid")
                        .HasColumnName("proveedorID");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric")
                        .HasColumnName("total");

                    b.HasKey("OrdenCompraID");

                    b.HasIndex("ProveedorID");

                    b.ToTable("OrdenesCompra", (string)null);
                });

            modelBuilder.Entity("GestionDevoluciones.Entidad.DetallesDevolucion", b =>
                {
                    b.Property<Guid>("DetalleDevolucionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("detalleDevolucionID");

                    b.Property<decimal>("Cantidad")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("cantidad");

                    b.Property<Guid>("DevolucionID")
                        .HasColumnType("uuid")
                        .HasColumnName("devolucionID");

                    b.Property<string>("EstadoProducto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("estadoProducto");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaActualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaCreacion");

                    b.Property<Guid>("ProductoID")
                        .HasColumnType("uuid")
                        .HasColumnName("productoID");

                    b.HasKey("DetalleDevolucionID");

                    b.HasIndex("DevolucionID");

                    b.HasIndex("ProductoID");

                    b.ToTable("DetallesDevolucion", (string)null);
                });

            modelBuilder.Entity("GestionDevoluciones.Entidad.Devoluciones", b =>
                {
                    b.Property<Guid>("DevolucionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("devolucionID");

                    b.Property<string>("EstadoDevolucion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("estadoDevolucion");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaActualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaCreacion");

                    b.Property<DateTime>("FechaDevolucion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaDevolucion");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("motivo");

                    b.Property<Guid>("PedidoID")
                        .HasColumnType("uuid")
                        .HasColumnName("pedidoID");

                    b.HasKey("DevolucionID");

                    b.HasIndex("PedidoID");

                    b.ToTable("Devoluciones", (string)null);
                });

            modelBuilder.Entity("GestionDevoluciones.Entidad.HistorialEstadoDevolucion", b =>
                {
                    b.Property<Guid>("HistorialDevolucionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("historialDevolucionID");

                    b.Property<Guid>("DevolucionID")
                        .HasColumnType("uuid")
                        .HasColumnName("devolucionID");

                    b.Property<string>("EstadoAnterior")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("estadoAnterior");

                    b.Property<string>("EstadoNuevo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("estadoNuevo");

                    b.Property<DateTime>("FechaCambio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaCambio");

                    b.Property<string>("UsuarioResponsable")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("usuarioResponsable");

                    b.HasKey("HistorialDevolucionID");

                    b.HasIndex("DevolucionID");

                    b.ToTable("HistorialEstadoDevolucion", (string)null);
                });

            modelBuilder.Entity("GestionDevoluciones.Entidad.PagosDevoluciones", b =>
                {
                    b.Property<Guid>("PagoDevolucionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("pagoDevolucionID");

                    b.Property<Guid>("DevolucionID")
                        .HasColumnType("uuid")
                        .HasColumnName("devolucionID");

                    b.Property<string>("EstadoReembolso")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("estadoReembolso");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaActualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaCreacion");

                    b.Property<DateTime>("FechaReembolso")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaReembolso");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("metodoPago");

                    b.Property<decimal>("MontoReembolsado")
                        .HasColumnType("numeric")
                        .HasColumnName("montoReembolsado");

                    b.HasKey("PagoDevolucionID");

                    b.HasIndex("DevolucionID");

                    b.ToTable("PagosDevoluciones", (string)null);
                });

            modelBuilder.Entity("GestionInventarios.Entidad.Inventario", b =>
                {
                    b.Property<Guid>("InventarioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("inventario_id");

                    b.Property<Guid>("AlmacenID")
                        .HasColumnType("uuid")
                        .HasColumnName("almacen_id");

                    b.Property<int>("CantidadDisponible")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad_disponible");

                    b.Property<DateTime>("FechaUltimaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_ultima_actualizacion");

                    b.Property<Guid>("ProductoID")
                        .HasColumnType("uuid")
                        .HasColumnName("producto_id");

                    b.HasKey("InventarioID");

                    b.HasIndex("AlmacenID");

                    b.HasIndex("ProductoID");

                    b.ToTable("Inventarios", (string)null);
                });

            modelBuilder.Entity("GestionInventarios.Entidad.InventarioUbicaciones", b =>
                {
                    b.Property<Guid>("InventarioUbicacionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("inventarioUbicacionID");

                    b.Property<decimal>("CantidadDisponible")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("cantidadDisponible");

                    b.Property<decimal>("CantidadReservada")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("cantidadReservada");

                    b.Property<DateTime>("FechaUltimaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaUltimaActualizacion");

                    b.Property<Guid>("ProductoID")
                        .HasColumnType("uuid")
                        .HasColumnName("productoID");

                    b.Property<Guid>("UbicacionID")
                        .HasColumnType("uuid")
                        .HasColumnName("ubicacionID");

                    b.HasKey("InventarioUbicacionID");

                    b.HasIndex("ProductoID");

                    b.HasIndex("UbicacionID");

                    b.ToTable("InventarioUbicaciones", (string)null);
                });

            modelBuilder.Entity("GestionInventarios.Entidad.MovimientoInventario", b =>
                {
                    b.Property<Guid>("MovimientoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("movimientoID");

                    b.Property<Guid>("AlmacenID")
                        .HasColumnType("uuid")
                        .HasColumnName("almacenID");

                    b.Property<decimal>("Cantidad")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("cantidad");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("creadoPor");

                    b.Property<string>("DocumentoRelacionado")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("documentoRelacionado");

                    b.Property<DateTime>("FechaMovimiento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaMovimiento");

                    b.Property<Guid>("ProductoID")
                        .HasColumnType("uuid")
                        .HasColumnName("productoID");

                    b.Property<string>("TipoMovimiento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tipoMovimiento");

                    b.HasKey("MovimientoID");

                    b.HasIndex("AlmacenID");

                    b.HasIndex("ProductoID");

                    b.ToTable("MovimientosInventario", (string)null);
                });

            modelBuilder.Entity("GestionPedidos.Entidad.Cliente", b =>
                {
                    b.Property<Guid>("ClienteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ClienteID");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CorreoElectronico");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Direccion");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("FechaActualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("FechaCreacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Nombre");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Telefono");

                    b.HasKey("ClienteID");

                    b.ToTable("Cliente", (string)null);
                });

            modelBuilder.Entity("GestionPedidos.Entidad.DetallesPedido", b =>
                {
                    b.Property<Guid>("DetalleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("detalleID");

                    b.Property<decimal>("Cantidad")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("cantidad");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaActualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaCreacion");

                    b.Property<Guid>("PedidoID")
                        .HasColumnType("uuid")
                        .HasColumnName("pedidoID");

                    b.Property<decimal>("PrecioUnitario")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("precioUnitario");

                    b.Property<Guid>("ProductoID")
                        .HasColumnType("uuid")
                        .HasColumnName("productoID");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("subtotal");

                    b.HasKey("DetalleID");

                    b.HasIndex("PedidoID");

                    b.HasIndex("ProductoID");

                    b.ToTable("DetallesPedido", (string)null);
                });

            modelBuilder.Entity("GestionPedidos.Entidad.HistorialEstadoPedido", b =>
                {
                    b.Property<Guid>("HistorialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("historialID");

                    b.Property<string>("EstadoAnterior")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("estadoAnterior");

                    b.Property<string>("EstadoNuevo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("estadoNuevo");

                    b.Property<DateTime>("FechaCambio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaCambio");

                    b.Property<Guid>("PedidoID")
                        .HasColumnType("uuid")
                        .HasColumnName("pedidoID");

                    b.Property<string>("UsuarioResponsable")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("usuarioResponsable");

                    b.HasKey("HistorialID");

                    b.HasIndex("PedidoID");

                    b.ToTable("HistorialEstadoPedido", (string)null);
                });

            modelBuilder.Entity("GestionPedidos.Entidad.Pagos", b =>
                {
                    b.Property<Guid>("PagoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("pagoID");

                    b.Property<string>("EstadoPago")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("estadoPago");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaActualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaCreacion");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaPago");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("metodoPago");

                    b.Property<decimal>("Monto")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("monto");

                    b.Property<Guid>("PedidoID")
                        .HasColumnType("uuid")
                        .HasColumnName("pedidoID");

                    b.HasKey("PagoID");

                    b.HasIndex("PedidoID");

                    b.ToTable("Pagos", (string)null);
                });

            modelBuilder.Entity("GestionPedidos.Entidad.Pedido", b =>
                {
                    b.Property<Guid>("PedidoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PedidoID");

                    b.Property<Guid>("ClienteID")
                        .HasColumnType("uuid")
                        .HasColumnName("ClienteID");

                    b.Property<string>("EstadoPedido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("EstadoPedido");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("FechaActualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("FechaCreacion");

                    b.Property<DateTime>("FechaPedido")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("FechaPedido");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("MetodoPago");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("Total");

                    b.HasKey("PedidoID");

                    b.HasIndex("ClienteID");

                    b.ToTable("Pedido", (string)null);
                });

            modelBuilder.Entity("GestionProveedores.Entidad.HistorialProveedor", b =>
                {
                    b.Property<Guid>("HistorialProveedorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("historialProveedorID");

                    b.Property<int>("Calificacion")
                        .HasColumnType("integer")
                        .HasColumnName("calificacion");

                    b.Property<string>("Comentarios")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comentarios");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaActualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaCreacion");

                    b.Property<DateTime>("FechaEvaluacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaEvaluacion");

                    b.Property<Guid>("ProveedorID")
                        .HasColumnType("uuid")
                        .HasColumnName("proveedorID");

                    b.HasKey("HistorialProveedorID");

                    b.HasIndex("ProveedorID");

                    b.ToTable("HistorialProveedor", (string)null);
                });

            modelBuilder.Entity("GestionProveedores.Entidad.PagosProveedores", b =>
                {
                    b.Property<Guid>("PagoProveedorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("pagoProveedorID");

                    b.Property<string>("EstadoPago")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estadoPago");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaActualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaCreacion");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaPago");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metodoPago");

                    b.Property<decimal>("Monto")
                        .HasColumnType("numeric")
                        .HasColumnName("monto");

                    b.Property<Guid>("ProveedorID")
                        .HasColumnType("uuid")
                        .HasColumnName("proveedorID");

                    b.HasKey("PagoProveedorID");

                    b.HasIndex("ProveedorID");

                    b.ToTable("PagosProveedores", (string)null);
                });

            modelBuilder.Entity("GestionProveedores.Entidad.Proveedor", b =>
                {
                    b.Property<Guid>("ProveedorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("proveedor_id");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("direccion");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_actualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("InformacionContacto")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("informacion_contacto");

                    b.Property<string>("NombreProveedor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre_proveedor");

                    b.HasKey("ProveedorID");

                    b.ToTable("Proveedor", (string)null);
                });

            modelBuilder.Entity("RecepcionMercancia.Entidad.ItemRecepcion", b =>
                {
                    b.Property<Guid>("RecepccionItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("recepccionItemID");

                    b.Property<int>("CantidadRecibida")
                        .HasColumnType("integer")
                        .HasColumnName("cantidadRecibida");

                    b.Property<string>("Comentarios")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comentarios");

                    b.Property<string>("Condicion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("condicion");

                    b.Property<Guid>("ProductoID")
                        .HasColumnType("uuid")
                        .HasColumnName("productoID");

                    b.Property<Guid>("RecepcionID")
                        .HasColumnType("uuid")
                        .HasColumnName("recepcionID");

                    b.HasKey("RecepccionItemID");

                    b.HasIndex("ProductoID");

                    b.HasIndex("RecepcionID");

                    b.ToTable("ItemsRecepcion", (string)null);
                });

            modelBuilder.Entity("RecepcionMercancia.Entidad.Producto", b =>
                {
                    b.Property<Guid>("ProductoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("productoID");

                    b.Property<string>("CodigoProducto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("codigoProducto");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaActualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaCreacion");

                    b.Property<string>("NombreProducto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nombreProducto");

                    b.Property<string>("UnidadMedida")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("unidadMedida");

                    b.HasKey("ProductoID");

                    b.ToTable("Producto", (string)null);
                });

            modelBuilder.Entity("RecepcionMercancia.Entidad.Recepcion", b =>
                {
                    b.Property<Guid>("RecepcionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("recepcion_id");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_actualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaRecepcion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_recepcion");

                    b.Property<Guid>("OrdenDeCompraID")
                        .HasColumnType("uuid")
                        .HasColumnName("orden_de_compra_id");

                    b.Property<string>("RecibidoPor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("recibido_por");

                    b.HasKey("RecepcionID");

                    b.HasIndex("OrdenDeCompraID");

                    b.ToTable("Recepciones", (string)null);
                });

            modelBuilder.Entity("TransporteEnvios.Entidad.CostosEnvio", b =>
                {
                    b.Property<Guid>("CostoEnvioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("costoEnvioID");

                    b.Property<decimal>("CostoAdicional")
                        .HasColumnType("numeric")
                        .HasColumnName("costoAdicional");

                    b.Property<decimal>("CostoBase")
                        .HasColumnType("numeric")
                        .HasColumnName("costoBase");

                    b.Property<decimal>("CostoTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("costoTotal");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("numeric")
                        .HasColumnName("descuento");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaActualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaCreacion");

                    b.Property<Guid>("OrdenEnvioID")
                        .HasColumnType("uuid")
                        .HasColumnName("ordenEnvioID");

                    b.HasKey("CostoEnvioID");

                    b.HasIndex("OrdenEnvioID");

                    b.ToTable("CostosEnvio", (string)null);
                });

            modelBuilder.Entity("TransporteEnvios.Entidad.DocumentacionEnvio", b =>
                {
                    b.Property<Guid>("DocumentacionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("documentacionID");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaActualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaCreacion");

                    b.Property<Guid>("OrdenEnvioID")
                        .HasColumnType("uuid")
                        .HasColumnName("ordenEnvioID");

                    b.Property<string>("RutaArchivo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rutaArchivo");

                    b.Property<string>("TipoDocumento")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipoDocumento");

                    b.HasKey("DocumentacionID");

                    b.HasIndex("OrdenEnvioID");

                    b.ToTable("DocumentacionEnvio", (string)null);
                });

            modelBuilder.Entity("TransporteEnvios.Entidad.OrdenesEnvio", b =>
                {
                    b.Property<Guid>("OrdenEnvioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ordenEnvioID");

                    b.Property<decimal>("CostoEnvio")
                        .HasColumnType("numeric")
                        .HasColumnName("costoEnvio");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaActualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaCreacion");

                    b.Property<DateTime?>("FechaEntregaEstimada")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaEntregaEstimada");

                    b.Property<DateTime?>("FechaEnvio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaEnvio");

                    b.Property<Guid>("PedidoID")
                        .HasColumnType("uuid")
                        .HasColumnName("pedidoID");

                    b.Property<Guid>("TransportistaID")
                        .HasColumnType("uuid")
                        .HasColumnName("transportistaID");

                    b.HasKey("OrdenEnvioID");

                    b.HasIndex("PedidoID");

                    b.HasIndex("TransportistaID");

                    b.ToTable("OrdenesEnvio", (string)null);
                });

            modelBuilder.Entity("TransporteEnvios.Entidad.Ruta", b =>
                {
                    b.Property<Guid>("RutaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("rutaID");

                    b.Property<decimal>("Distancia")
                        .HasColumnType("numeric")
                        .HasColumnName("distancia");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaActualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaCreacion");

                    b.Property<Guid>("OrdenEnvioID")
                        .HasColumnType("uuid")
                        .HasColumnName("ordenEnvioID");

                    b.Property<string>("PuntoDestino")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("puntoDestino");

                    b.Property<string>("PuntoSalida")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("puntoSalida");

                    b.Property<string>("TiempoEstimado")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tiempoEstimado");

                    b.HasKey("RutaID");

                    b.HasIndex("OrdenEnvioID");

                    b.ToTable("Ruta", (string)null);
                });

            modelBuilder.Entity("TransporteEnvios.Entidad.SeguimientoEnvio", b =>
                {
                    b.Property<Guid>("SeguimientoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("seguimientoID");

                    b.Property<string>("Comentarios")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comentarios");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaActualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaCreacion");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaRegistro");

                    b.Property<Guid>("OrdenEnvioID")
                        .HasColumnType("uuid")
                        .HasColumnName("ordenEnvioID");

                    b.Property<string>("UbicacionActual")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ubicacionActual");

                    b.HasKey("SeguimientoID");

                    b.HasIndex("OrdenEnvioID");

                    b.ToTable("SeguimientoEnvio", (string)null);
                });

            modelBuilder.Entity("TransporteEnvios.Entidad.Transportista", b =>
                {
                    b.Property<Guid>("TransportistaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("transportistaID");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccion");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaActualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fechaCreacion");

                    b.Property<string>("NombreTransportista")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombreTransportista");

                    b.Property<decimal>("TarifaBase")
                        .HasColumnType("numeric")
                        .HasColumnName("tarifaBase");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("telefono");

                    b.HasKey("TransportistaID");

                    b.ToTable("Transportista", (string)null);
                });

            modelBuilder.Entity("GestionAlmacenes.Entidad.MovimientosAlmacen", b =>
                {
                    b.HasOne("RecepcionMercancia.Entidad.Producto", null)
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAlmacenes.Entidad.Ubicacion", null)
                        .WithMany()
                        .HasForeignKey("UbicacionDestinoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAlmacenes.Entidad.Ubicacion", null)
                        .WithMany()
                        .HasForeignKey("UbicacionOrigenID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GestionAlmacenes.Entidad.OrdenesTransferenciaInterna", b =>
                {
                    b.HasOne("GestionAlmacenes.Entidad.Almacen", null)
                        .WithMany()
                        .HasForeignKey("AlmacenDestinoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAlmacenes.Entidad.Almacen", null)
                        .WithMany()
                        .HasForeignKey("AlmacenOrigenID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RecepcionMercancia.Entidad.Producto", null)
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GestionAlmacenes.Entidad.Ubicacion", b =>
                {
                    b.HasOne("GestionAlmacenes.Entidad.Almacen", null)
                        .WithMany()
                        .HasForeignKey("AlmacenID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GestionAlmacenes.Entidad.ZonasAlmacen", b =>
                {
                    b.HasOne("GestionAlmacenes.Entidad.Almacen", null)
                        .WithMany()
                        .HasForeignKey("AlmacenID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GestionCompras.Entidad.DetallesOrdenCompra", b =>
                {
                    b.HasOne("GestionCompras.Entidad.OrdenesCompra", null)
                        .WithMany()
                        .HasForeignKey("OrdenCompraID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RecepcionMercancia.Entidad.Producto", null)
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GestionCompras.Entidad.ItemDeOrdenDeCompra", b =>
                {
                    b.HasOne("GestionCompras.Entidad.OrdenesCompra", null)
                        .WithMany()
                        .HasForeignKey("OrdenDeCompraID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RecepcionMercancia.Entidad.Producto", null)
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GestionCompras.Entidad.OrdenesCompra", b =>
                {
                    b.HasOne("GestionProveedores.Entidad.Proveedor", null)
                        .WithMany()
                        .HasForeignKey("ProveedorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GestionDevoluciones.Entidad.DetallesDevolucion", b =>
                {
                    b.HasOne("GestionDevoluciones.Entidad.Devoluciones", null)
                        .WithMany()
                        .HasForeignKey("DevolucionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RecepcionMercancia.Entidad.Producto", null)
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GestionDevoluciones.Entidad.Devoluciones", b =>
                {
                    b.HasOne("GestionPedidos.Entidad.Pedido", null)
                        .WithMany()
                        .HasForeignKey("PedidoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GestionDevoluciones.Entidad.HistorialEstadoDevolucion", b =>
                {
                    b.HasOne("GestionDevoluciones.Entidad.Devoluciones", null)
                        .WithMany()
                        .HasForeignKey("DevolucionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GestionDevoluciones.Entidad.PagosDevoluciones", b =>
                {
                    b.HasOne("GestionDevoluciones.Entidad.Devoluciones", null)
                        .WithMany()
                        .HasForeignKey("DevolucionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GestionInventarios.Entidad.Inventario", b =>
                {
                    b.HasOne("GestionAlmacenes.Entidad.Almacen", null)
                        .WithMany()
                        .HasForeignKey("AlmacenID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecepcionMercancia.Entidad.Producto", null)
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GestionInventarios.Entidad.InventarioUbicaciones", b =>
                {
                    b.HasOne("RecepcionMercancia.Entidad.Producto", null)
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAlmacenes.Entidad.Ubicacion", null)
                        .WithMany()
                        .HasForeignKey("UbicacionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GestionInventarios.Entidad.MovimientoInventario", b =>
                {
                    b.HasOne("GestionAlmacenes.Entidad.Almacen", null)
                        .WithMany()
                        .HasForeignKey("AlmacenID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RecepcionMercancia.Entidad.Producto", null)
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GestionPedidos.Entidad.DetallesPedido", b =>
                {
                    b.HasOne("GestionPedidos.Entidad.Pedido", null)
                        .WithMany()
                        .HasForeignKey("PedidoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RecepcionMercancia.Entidad.Producto", null)
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GestionPedidos.Entidad.HistorialEstadoPedido", b =>
                {
                    b.HasOne("GestionPedidos.Entidad.Pedido", null)
                        .WithMany()
                        .HasForeignKey("PedidoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GestionPedidos.Entidad.Pagos", b =>
                {
                    b.HasOne("GestionPedidos.Entidad.Pedido", null)
                        .WithMany()
                        .HasForeignKey("PedidoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GestionPedidos.Entidad.Pedido", b =>
                {
                    b.HasOne("GestionPedidos.Entidad.Cliente", null)
                        .WithMany()
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GestionProveedores.Entidad.HistorialProveedor", b =>
                {
                    b.HasOne("GestionProveedores.Entidad.Proveedor", null)
                        .WithMany()
                        .HasForeignKey("ProveedorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GestionProveedores.Entidad.PagosProveedores", b =>
                {
                    b.HasOne("GestionProveedores.Entidad.Proveedor", null)
                        .WithMany()
                        .HasForeignKey("ProveedorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RecepcionMercancia.Entidad.ItemRecepcion", b =>
                {
                    b.HasOne("RecepcionMercancia.Entidad.Producto", null)
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecepcionMercancia.Entidad.Recepcion", null)
                        .WithMany()
                        .HasForeignKey("RecepcionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecepcionMercancia.Entidad.Recepcion", b =>
                {
                    b.HasOne("GestionCompras.Entidad.OrdenesCompra", null)
                        .WithMany()
                        .HasForeignKey("OrdenDeCompraID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TransporteEnvios.Entidad.CostosEnvio", b =>
                {
                    b.HasOne("TransporteEnvios.Entidad.OrdenesEnvio", null)
                        .WithMany()
                        .HasForeignKey("OrdenEnvioID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TransporteEnvios.Entidad.DocumentacionEnvio", b =>
                {
                    b.HasOne("TransporteEnvios.Entidad.OrdenesEnvio", null)
                        .WithMany()
                        .HasForeignKey("OrdenEnvioID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TransporteEnvios.Entidad.OrdenesEnvio", b =>
                {
                    b.HasOne("GestionPedidos.Entidad.Pedido", null)
                        .WithMany()
                        .HasForeignKey("PedidoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TransporteEnvios.Entidad.Transportista", null)
                        .WithMany()
                        .HasForeignKey("TransportistaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TransporteEnvios.Entidad.Ruta", b =>
                {
                    b.HasOne("TransporteEnvios.Entidad.OrdenesEnvio", null)
                        .WithMany()
                        .HasForeignKey("OrdenEnvioID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TransporteEnvios.Entidad.SeguimientoEnvio", b =>
                {
                    b.HasOne("TransporteEnvios.Entidad.OrdenesEnvio", null)
                        .WithMany()
                        .HasForeignKey("OrdenEnvioID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
